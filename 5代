#include<stdio.h>
#include <string.h>
#define   MAX_LEN  10                	   /* 字符串最大长度 */
#define   STU_NUM 30                       /* 最多的学生人数 */
#define   COURSE_NUM 6                     /* 最多的考试科目数 */
typedef struct student
{
    long num;	/* 每个学生的学号 */
    char name[MAX_LEN];            	/* 每个学生的姓名 */
    float score[COURSE_NUM];	/* 每个学生COURSE_NUM门功课的成绩 */
    float sum;                       /* 每个学生的总成绩 */
    float aver;                   /* 每个学生的平均成绩 */
}STU;
int   getMenuChoice(void);
void  ReadScore(STU stu[], int n, int m);
void  AverSumofEveryStudent(STU stu[], int n, int m);
void  AverSumofEveryCourse(STU stu[], int n, int m);
void  SortbyScore(STU stu[], int n, int m, int (*compare)(float a, float b));
int   Ascending(float a, float b);
int   Descending(float a, float b);
void  SwapFloat(float* x, float* y);
void  SwapLong(long* x, long* y);
void  SwapChar(char x[], char y[]);
void  AsSortbyNum(STU stu[], int n, int m);
void  SortbyName(STU stu[], int n, int m);
void  SearchbyNum(STU stu[], int n, int m);
void  SearchbyName(STU stu[], int n, int m);
void  StatisticAnalysis(STU stu[], int n, int m);
void  PrintScore(STU stu[], int n, int m);
int main()
{
    STU stu[STU_NUM];
    int choice;
    int n,m;
    printf("Input student number(n<30):\n");
    scanf_s("%d", &n);
    while (scanf_s("%d", &n) != 1 || n > STU_NUM) {
        printf("Invalid input! Please input student number (n < 30):\n");
        fflush(stdin);
    }
    printf("Please Input your choice:");
    scanf_s("%d", &choice);
    do {
        choice = getMenuChoice();
        switch (choice) {
        case 1:
            printf("Input course number(m<=%d):\n", COURSE_NUM);
            while (scanf_s("%d", &m) != 1 || m > COURSE_NUM) {
                printf("Invalid input! Please input course number (m <= %d):\n", COURSE_NUM);
                fflush(stdin);
            }
            ReadScore(stu, n, m);
            break;
        case 2:
            AverSumofEveryCourse(stu, n, m);
            break;
        case 3:
            AverSumofEveryStudent(stu, n, m);
            break;
        case 4:
            SortbyScore(stu, n, m, &Descending);
            break;
        case 5:
            SortbyScore(stu, n, m, &Ascending);
            break;
        case 6:
            AsSortbyNum(stu, n, m);
            break;
        case 7:
            SortbyName(stu, n, m);
            break;
        case 8:
            SearchbyNum(stu, n, m);
            break;
        case 9:
            SearchbyName(stu, n, m);
            break;
        case 10:
            StatisticAnalysis(stu, n, m);
            break;
        case 11:
            PrintScore(stu, n, m);
            break;
        case 0:
            printf("End of program!\n");
            break;
        default:
            printf("Input error!\n");
        }
    } while (choice != 0);
    return 0;

}
int getMenuChoice(void)
{
    int choice;
    printf("\n******************Menu******************\n");
    printf("1. Input student information\n");
    printf("2. Calculate average and sum of every course\n");
    printf("3. Calculate average and sum of every student\n");
    printf("4. Sort scores by descending order\n");
    printf("5. Sort scores by ascending order\n");
    printf("6. Sort students by number\n");
    printf("7. Sort students by name\n");
    printf("8. Search student by number\n");
    printf("9. Search student by name\n");
    printf("10. Perform statistic analysis\n");
    printf("11. Print scores\n");
    printf("0. Exit program\n");
    scanf_s("%d", &choice);
    fflush(stdin);
    return choice;
}
void ReadScore(STU stu[], int n, int m) {
    printf("Input student's ID, name and score:\n");
    for (int i = 0; i < n; i++) {
        scanf_s("%ld%s", &stu[i].num, stu[i].name);
        for (int j = 0; j < m; j++) {
            scanf_s("%f", &stu[i].score[j]);
        }
    }
}
void AverSumofEveryStudent(STU stu[], int n, int m) {
    for (int i = 0; i < n; i++) {
        stu[i].sum = 0;
        for (int j = 0; j < m; j++) {
            stu[i].sum += stu[i].score[j];
        }
        stu[i].aver = stu[i].sum / m;
        printf("student %d: sum=%.0f,aver=%.0f\n", i + 1, stu[i].sum, stu[i].aver);
    }
}
void AverSumofEveryCourse(STU stu[], int n, int m) {
    float sum = 0;
    float aver = 0;
    for (int i = 0; i < m; i++) {
        sum = 0;
        for (int j = 0; j < n; j++) {
            sum += stu[j].score[i];
        }
        aver = sum / n;
        printf("course %d:sum=%.0f,aver=%.0f\n", i + 1, sum, aver);
    }
}
void SortbyScore(STU stu[], int n, int m, int (*compare)(float a, float b)) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - 1 - i; j++) {
            if ((*compare)(stu[j].sum, stu[j + 1].sum)) {
                SwapLong(&stu[j].num, &stu[j + 1].num);
                SwapChar(stu[j].name, stu[j + 1].name);
                SwapFloat(&stu[j].sum, &stu[j + 1].sum);
                SwapFloat(&stu[j].aver, &stu[j + 1].aver);
                for (int k = 0; k < m; k++) {
                    SwapFloat(&stu[j].score[k], &stu[j + 1].score[k]);
                }
            }
        }
    }

    if (compare == &Ascending) {
        printf("Sort in ascending order by score:\n");
    }
    else if (compare == &Descending) {
        printf("Sort in descending order by score:\n");
    }

    for (int i = 0; i < n; i++) {
        printf("%ld\t%s\t", stu[i].num, stu[i].name);
        for (int j = 0; j < m; j++) {
            printf("%.0f\t", stu[i].score[j]);
        }
        printf("%.0f\t%.0f\n", stu[i].sum, stu[i].aver);
    }
}
void AsSortbyNum(STU stu[], int n, int m) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - 1 - i; j++) {
            if (stu[j].num > stu[j + 1].num) {
                SwapLong(&stu[j].num, &stu[j + 1].num);
                SwapChar(stu[j].name, stu[j + 1].name);
                SwapFloat(&stu[j].sum, &stu[j + 1].sum);
                SwapFloat(&stu[j].aver, &stu[j + 1].aver);
                for (int k = 0; k < m; k++) {
                    SwapFloat(&stu[j].score[k], &stu[j + 1].score[k]);
                }
            }
        }
    }

    printf("Sort in ascending order by number:\n");

    for (int i = 0; i < n; i++) {
        printf("%ld\t%s\t", stu[i].num, stu[i].name);
        for (int j = 0; j < m; j++) {
            printf("%.0f\t", stu[i].score[j]);
        }
        printf("%.0f\t%.0f\n", stu[i].sum, stu[i].aver);
    }
}
void SortbyName(STU stu[], int n, int m) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - 1 - i; j++) {
            if (strcmp(stu[j].name, stu[j + 1].name) > 0) {
                SwapLong(&stu[j].num, &stu[j + 1].num);
                SwapChar(stu[j].name, stu[j + 1].name);
                SwapFloat(&stu[j].sum, &stu[j + 1].sum);
                SwapFloat(&stu[j].aver, &stu[j + 1].aver);
                for (int k = 0; k < m; k++) {
                    SwapFloat(&stu[j].score[k], &stu[j + 1].score[k]);
                }
            }
        }
    }

    printf("Sort in dictionary order by name:\n");

    for (int i = 0; i < n; i++) {
        printf("%ld\t%s\t", stu[i].num, stu[i].name);
        for (int j = 0; j < m; j++) {
            printf("%.0f\t", stu[i].score[j]);
        }
        printf("%.0f\t%.0f\n", stu[i].sum, stu[i].aver);
    }
}
void SearchbyNum(STU stu[], int n, int m) {
    long search_num;
    int found = 0;

    printf("Input the number you want to search:\n");
    scanf_s("%ld", &search_num);

    for (int i = 0; i < n; i++) {
        if (stu[i].num == search_num) {
            printf("%ld\t%s\t", stu[i].num, stu[i].name);
            for (int j = 0; j < m; j++) {
                printf("%.0f\t", stu[i].score[j]);
            }
            printf("%.0f\t%.0f\n", stu[i].sum, stu[i].aver);
            found = 1;
            break;
        }
    }

    if (!found) {
        printf("Not found!\n");
    }
}
void SearchbyName(STU stu[], int n, int m) {
    char search_name[MAX_LEN];
    int found = 0;

    printf("Input the name you want to search:\n");
    scanf_s("%s", search_name);

    for (int i = 0; i < n; i++) {
        if (strcmp(stu[i].name, search_name) == 0) {
            printf("%ld\t%s\t", stu[i].num, stu[i].name);
            for (int j = 0; j < m; j++) {
                printf("%.0f\t", stu[i].score[j]);
            }
            printf("%.0f\t%.0f\n", stu[i].sum, stu[i].aver);
            found = 1;
            break;
        }
    }

    if (!found) {
        printf("Not found!\n");
    }
}
void StatisticAnalysis(STU stu[], int n, int m) {
    int count[6] = { 0 };
    float percent[6] = { 0 };

    for (int i = 0; i < m; i++) {
        printf("For course %d:\n", i + 1);
        for (int j = 0; j < n; j++) {
            if (stu[j].score[i] < 60) {
                count[0]++;
            }
            else if (stu[j].score[i] >= 60 && stu[j].score[i] < 70) {
                count[1]++;
            }
            else if (stu[j].score[i] >= 70 && stu[j].score[i] < 80) {
                count[2]++;
            }
            else if (stu[j].score[i] >= 80 && stu[j].score[i] < 90) {
                count[3]++;
            }
            else if (stu[j].score[i] >= 90 && stu[j].score[i] < 100) {
                count[4]++;
            }
            else if (stu[j].score[i] == 100) {
                count[5]++;
            }
        }

        for (int k = 0; k < 6; k++) {
            percent[k] = (float)count[k] / n * 100;
        }

        printf("<60\t%d\t%.2f%%\n", count[0], percent[0]);
        printf("60-69\t%d\t%.2f%%\n", count[1], percent[1]);
        printf("70-79\t%d\t%.2f%%\n", count[2], percent[2]);
        printf("80-89\t%d\t%.2f%%\n", count[3], percent[3]);
        printf("90-99\t%d\t%.2f%%\n", count[4], percent[4]);
        printf("100\t%d\t%.2f%%\n", count[5], percent[5]);

        for (int k = 0; k < 6; k++) {
            count[k] = 0;
            percent[k] = 0;
        }
    }
}
void PrintScore(STU stu[], int n, int m) {
    for (int i = 0; i < n; i++) {
        printf("%ld\t%s\t", stu[i].num, stu[i].name);
        for (int j = 0; j < m; j++) {
            printf("%.0f\t", stu[i].score[j]);
        }
        printf("%.0f\t%.0f\n", stu[i].sum, stu[i].aver);
    }
}
int Ascending(float a, float b) {
    return a > b;
}
int Descending(float a, float b) {
    return a < b;
}
void SwapFloat(float* x, float* y) {
    float temp = *x;
    *x = *y;
    *y = temp;
}

void SwapLong(long* x, long* y) {
    long temp = *x;
    *x = *y;
    *y = temp;
}

void SwapChar(char x[], char y[]) {
    char temp[MAX_LEN];
    strcpy_s(temp, MAX_LEN, x);
    strcpy_s(x, MAX_LEN, y);
    strcpy_s(y, MAX_LEN, temp);
}


